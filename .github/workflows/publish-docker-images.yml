name: publish-docker-images
# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths
on:
  push:
    paths:
      - ".github/workflows/**"
      - "Dockerfile.d/**"

jobs:
  detect:
    outputs:
      changed-contexts: ${{ steps['detected-context-paths'].outputs['changed-contexts'] }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.4
      - name: detect contexts that changed
        run: >
          jq --compact-output --slurp '[.[][]] 
          | map(select(. | match("^Dockerfile\\.d/"))) 
          | map(. |= (gsub("Dockerfile\\.d/(?<context>[^/]*)/.*"; "Dockerfile.d/\(.context)"))) 
          | unique' 
          $HOME/files_{added,modified}.json > $HOME/changed_contexts.json
      - id: detected-context-paths
        run: echo "::set-output name=changed-contexts::$(cat $HOME/changed_contexts.json)"
  build:
    needs:
      - detect
    strategy:
      matrix:
        # See: https://github.com/actions/virtual-environments
        os: [ubuntu-latest]
        target-context: ${{ fromJson(needs.detect.outputs['changed-contexts']) }}
    runs-on: ${{ matrix.os }}
    steps:
      - run: docker system df
      - run: df -k .
      - uses: actions/checkout@v2
      - name: Cache working dir
        id: cache-working-dir
        uses: actions/cache@v2
        with:
          path: ${{ matrix.target-context }}/working-dir
          key: ${{ runner.os }}-build-working-dir-${{ matrix.target-context }}
      - name: Cache cache dir
        id: cache-cache-dir
        uses: actions/cache@v2
        with:
          path: ${{ matrix.target-context }}/cache
          key: ${{ runner.os }}-build-cache-${{ matrix.target-context }}
      - name: Download archives
        run: |
          ${{ matrix.target-context }}/get-gentoo-archives.sh
      - name: store environment variables
        run: |
          echo "INTERMEDIATE_CONTAINER_NAME=intermediate-container-$(basename ${{ matrix.target-context }})" >> $GITHUB_ENV
          echo "INTERMEDIATE_IMAGE_NAME=intermediate-image-$(basename ${{ matrix.target-context }})" >> $GITHUB_ENV
          SHORT_SHA=$(echo '${{ toJSON(github) }}' | jq -r '.sha[0:7]')
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "TAG=$(date +%Y%m-)$SHORT_SHA" >> $GITHUB_ENV
          echo "RESULT_IMAGE=ghcr.io/${{ github.repository_owner }}/$(basename ${{ matrix.target-context }})" >> $GITHUB_ENV
      - name: build intermediate image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build --tag $INTERMEDIATE_IMAGE_NAME:$TAG --target builder ${{ matrix.target-context }}
      - name: start intermediate container
        run: |
          docker run --name=$INTERMEDIATE_CONTAINER_NAME $INTERMEDIATE_IMAGE_NAME:$TAG sh -c ':'
      - run: docker system df
      - run: df -k .
      - name: cache files
        run: |
          TARGET_DIR=var/db/repos/
          mkdir -p ${{ matrix.target-context }}/cache/amd64/$TARGET_DIR
          docker cp $INTERMEDIATE_CONTAINER_NAME:/$TARGET_DIR ${{ matrix.target-context }}/cache/amd64/$TARGET_DIR
      - run: df -k .
      - name: cache binpkgs if it is the main branch
        run: |
          TARGET_DIR=var/cache/binpkgs/
          mkdir -p ${{ matrix.target-context }}/cache/amd64/$TARGET_DIR
          docker cp $INTERMEDIATE_CONTAINER_NAME:/$TARGET_DIR ${{ matrix.target-context }}/cache/amd64/$TARGET_DIR
        if: github.ref == 'refs/heads/main'
      - run: df -k .
      - name: remove intermediate container
        run: |
          docker rm $INTERMEDIATE_CONTAINER_NAME
          sudo apt-get update --quiet
          sudo apt-get install --assume-yes --no-install-recommends --quiet tree
          tree -d ${{ matrix.target-context }}/cache/
      - name: login to ghcr.io
        run: echo ${{ secrets.TOKEN_TO_PUSH_GHCR }} | docker login ghcr.io --username ${{ github.repository_owner }} --password-stdin
      - run: docker system df
      - run: df -k .
      - name: build and push ${{ matrix.target-context }}
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build --tag $RESULT_IMAGE ${{ matrix.target-context }}
          docker tag $RESULT_IMAGE $RESULT_IMAGE:$TAG
          docker push $RESULT_IMAGE:$TAG
      - name: overwrite latest tags if it is the main branch
        run: |
          docker push $RESULT_IMAGE
        if: github.ref == 'refs/heads/main'
